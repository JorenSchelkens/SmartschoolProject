@page "/winkel"
@page "/winkel/{winkelAdress}"
@inject NavigationManager navigationManager
@inject GoogleGebruiker Gebruiker
@inject ISessionStorageService sessionStorage
@inject IMatToaster Toaster

<style>
    .actief {
        background-color: white;
        padding: 10px;
        cursor: default;
    }

    .knop {
        margin-left: 2rem;
    }

    .check {
        margin-left: 2rem;
        width: 5rem;
        cursor: not-allowed;
    }

    .winkelnaam {
        width: 10rem;
    }

    label {
        margin: 0;
    }

    .heading {
        margin-bottom: 2rem;
    }

    .nietActief {
        background-color: white;
        padding: 10px;
        opacity: 0.6;
    }

    .border {
        background-color: white;
        padding: 10px;
        border-radius: 5px;
        width: 500px;
        margin: 10px;
    }

    MatButton {
        margin: 10px;
    }
</style>

@if (showMijnWinkels)
{
    <MatH2 Class="heading">Mijn winkels</MatH2>

    <MatList>

        @foreach (Winkel winkel in winkels)
        {
            if (winkel.goedgekeurd)
            {
                <MatListItem Class="actief" Disabled="true">

                    <div class="winkelnaam">@winkel.naam</div>

                    <MatButton Unelevated="true" OnClick="@(() => GaNaarWinkel(winkel.adress))" Class="knop">bewerken</MatButton>

                    <MatCheckbox @bind-Value="@winkel.actief" Class="check" @onclick="@(() => ActiefMakenWinkel(winkel))" Label="Actief"></MatCheckbox>

                </MatListItem>

                <MatListDivider></MatListDivider>
            }
            else
            {

                <MatListItem Class="nietActief" Disabled="true">

                    <div class="winkelnaam">@winkel.naam</div>

                    <MatButton Unelevated="true" Disabled="true" Class="knop">bewerken</MatButton>

                    <MatCheckbox @bind-Value="@winkel.actief" Class="check" @onclick="@(() => ActiefMakenWinkel(winkel))" Label="Actief"></MatCheckbox>

                </MatListItem>

                <MatListDivider></MatListDivider>
            }
        }

    </MatList>

    <br />
    <MatButton Unelevated="true" @onclick="@GaNaarWinkelToevoegen">Winkel toevoegen</MatButton>
}
else
{
    <div class="border">
        <h1>@winkel.naam</h1>

        @foreach (Artikel artikel in winkel.artikels)
        {
            <div>
                <h4>
                    @artikel.productnaam
                </h4>
                <table>
                    <tr>
                        <td>Prijs: </td>
                        <td>@artikel.standaardPrijs</td>
                    </tr>
                    <tr>
                        <td>Stock: </td>
                        <td>@artikel.stock</td>
                    </tr>
                </table>

                @if (artikel.actief)
                {
                    <span>Actief</span>
                }
                else
                {
                    <span>Niet Actief</span>
                }

                <br />

                <MatButton Unelevated="true" @onclick="@(() => ShowDialogArtikelAanpassen(artikel))">Artikel aanpassen</MatButton>

                <MatButton Unelevated="true" @onclick="@(() => ShowDialogArtikelKorting(artikel))">Korting toevoegen</MatButton>

                <br />

                @if (artikel.actief)
                {
                    <MatButton Unelevated="true" @onclick="@(() => ToggleArtikelActief(artikel))">Artikel op niet actief zetten</MatButton>
                }
                else
                {
                    <MatButton Unelevated="true" @onclick="@(() => ToggleArtikelActief(artikel))">Artikel op actief zetten</MatButton>
                }

            </div>
        }

        <br />
        <br />
    </div>
    <div class="border">
        <h2>Bestellingen</h2>

        @if (this.bestellingen.Count == 0)
        {
            <h3>Er zijn geen bestellingen</h3>
        }
        else
        {
            @foreach (Bestelling bestelling in this.bestellingen)
            {

                <div>

                    Begunstigde: @bestelling.GebruikersNaam
                    <br />
                    Datum: @bestelling.AanmaakDatum.ToString()
                    <br />
                    Prijs: € @bestelling.TotaalBedrag

                    @foreach (BesteldArtikel artikel in bestelling.GetBesteldeArtikels())
                    {
                        artikel.PrettyPrint();
                        <br />
                    }

                    <br />

                </div>

            }
        }
    </div>
    <MatDialog @bind-IsOpen="@showDialog">
        <MatDialogTitle>Artikel Toevoegen</MatDialogTitle>
        <MatDialogContent>

            <MatTextField @bind-Value="@tempArtikel.productnaam" Label="Artikel naam"></MatTextField>

            <MatNumericUpDownField Label="Artikel prijs"
                                   @bind-Value=@tempPrijs
                                   Minimum="0"
                                   Step="0.01m"
                                   DecimalPlaces=2>

            </MatNumericUpDownField>

            <MatNumericUpDownField Label="Artikel stock"
                                   TValue="int"
                                   @bind-Value=@tempArtikel.stock
                                   Minimum="0">
            </MatNumericUpDownField>

        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@CloseDialog">Sluiten</MatButton>
            <MatButton OnClick="@AddArtikel">Toevoegen</MatButton>
        </MatDialogActions>
    </MatDialog>

    <MatDialog @bind-IsOpen="@showDialog2">
        <MatDialogTitle>Artikel Aanpasssen</MatDialogTitle>
        <MatDialogContent>

            <MatTextField @bind-Value="@tempArtikel.productnaam" Label="Artikel naam"></MatTextField>

            <MatNumericUpDownField Label="Artikel prijs"
                                   @bind-Value=@tempPrijs
                                   Minimum="0"
                                   Step="0.01m"
                                   DecimalPlaces=2>

            </MatNumericUpDownField>

            <MatNumericUpDownField Label="Artikel stock"
                                   TValue="int"
                                   @bind-Value=@tempArtikel.stock
                                   Minimum="0">
            </MatNumericUpDownField>

        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@CloseDialog2">Sluiten</MatButton>
            <MatButton OnClick="@UpdateArtikel">Toevoegen</MatButton>
        </MatDialogActions>
    </MatDialog>

    <MatDialog @bind-IsOpen="@showDialog3">
        <MatDialogTitle>Korting Toevoegen</MatDialogTitle>
        <MatDialogContent>

            <MatTextField @bind-Value="@tempArtikel.productnaam" ReadOnly="true" Label="Artikel naam"></MatTextField>

            <MatNumericUpDownField Label="Korting (in procent)"
                                   TValue="int"
                                   @bind-Value=@tempArtikel.korting
                                   Minimum="0"
                                   Maximum="99">
            </MatNumericUpDownField>

        </MatDialogContent>
        <MatDialogActions>
            <MatButton OnClick="@CloseDialog3">Sluiten</MatButton>
            <MatButton OnClick="@UpdateArtikelKorting">Toevoegen</MatButton>
        </MatDialogActions>
    </MatDialog>

    <MatButton Unelevated="true" @onclick="@ShowDialogArtikel">Artikel toevoegen</MatButton>
}

@code {

    public DBConnection DBConnection = new DBConnection();
    public List<Winkel> winkels = new List<Winkel>();

    public Winkel winkel { get; set; }
    public List<Bestelling> bestellingen { get; set; }

    [Parameter]
    public string winkelAdress { get; set; }

    public bool showMijnWinkels { get; set; }
    public bool showDialog { get; set; }
    public bool showDialog2 { get; set; }
    public bool showDialog3 { get; set; }

    public Artikel tempArtikel { get; set; }
    public decimal tempPrijs { get; set; }

    protected override void OnInitialized()
    {
        showDialog = false;
        showDialog2 = false;
        showDialog3 = false;
        tempPrijs = 0m;
        tempArtikel = new Artikel();

        if (string.IsNullOrEmpty(winkelAdress))
        {
            winkels = DBConnection.GetMyWinkels(this.Gebruiker.GebruikerInfo.GebruikersNaam);
            showMijnWinkels = true;
        }
        else
        {
            winkel = DBConnection.GetWinkelByAdress(winkelAdress);
            bestellingen = DBConnection.GetAllBestellingenFromWinkel(winkel.winkelnr);
            showMijnWinkels = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this.Gebruiker = await sessionStorage.GetItemAsync<GoogleGebruiker>("GoogleGebruiker");
        this.Gebruiker.Refresh();

        this.StateHasChanged();
    }

    public void ShowDialogArtikel()
    {
        showDialog = true;
    }

    public void CloseDialog()
    {
        tempArtikel = new Artikel();
        tempPrijs = 0m;
        showDialog = false;
    }

    public void CloseDialog2()
    {
        tempArtikel = new Artikel();
        tempPrijs = 0m;
        showDialog2 = false;
    }

    public void CloseDialog3()
    {
        tempArtikel = new Artikel();
        tempPrijs = 0m;
        showDialog3 = false;
    }

    public void UpdateArtikel()
    {
        if (!string.IsNullOrWhiteSpace(tempArtikel.productnaam))
        {
            tempArtikel.standaardPrijs = Decimal.ToDouble(tempPrijs);
            bool succes = DBConnection.UpdateArtikel(tempArtikel);

            if (succes)
            {
                Toaster.Add("Succesvol aangepast", MatToastType.Success, "Succes");
            }
            else
            {
                winkel.artikels.Remove(tempArtikel);
                Toaster.Add("Probleem bij het aangepassen", MatToastType.Danger, "Error");
            }

            tempArtikel = new Artikel();
            tempPrijs = 0m;
            showDialog2 = false;
        }
    }

    public void UpdateArtikelKorting()
    {
        bool succes = DBConnection.UpdateArtikel(tempArtikel);

        if (succes)
        {
            Toaster.Add("Korting toegevoegd", MatToastType.Success, "Succes");
        }
        else
        {
            winkel.artikels.Remove(tempArtikel);
            Toaster.Add("Probleem bij het toevoegen van de korting", MatToastType.Danger, "Error");
        }

        tempArtikel = new Artikel();
        tempPrijs = 0m;
        showDialog3 = false;
    }

    public void AddArtikel()
    {
        if (!string.IsNullOrWhiteSpace(tempArtikel.productnaam))
        {
            tempArtikel.winkelnr = winkel.winkelnr;
            tempArtikel.standaardPrijs = Decimal.ToDouble(tempPrijs);
            winkel.artikels.Add(tempArtikel);
            bool succes = DBConnection.AddArtikel(tempArtikel);

            if (succes)
            {
                Toaster.Add("Succesvol toegevoegd", MatToastType.Success, "Succes");
            }
            else
            {
                winkel.artikels.Remove(tempArtikel);
                Toaster.Add("Probleem bij het toevoegen", MatToastType.Danger, "Error");
            }

            tempArtikel = new Artikel();
            tempPrijs = 0m;
            showDialog = false;
        }
    }

    public void ShowDialogArtikelAanpassen(Artikel artikel)
    {
        tempArtikel = artikel;
        tempPrijs = Convert.ToDecimal(artikel.standaardPrijs);
        showDialog2 = true;
    }

    public void ShowDialogArtikelKorting(Artikel artikel)
    {
        tempArtikel = artikel;
        showDialog3 = true;
    }

    public void ToggleArtikelActief(Artikel artikel)
    {
        artikel.actief = !artikel.actief;
        bool succes = DBConnection.VeranderStatusArtikel(artikel);

        if (succes)
        {
            Toaster.Add("Succesvol aangepast", MatToastType.Success, "Succes");
        }
        else
        {
            Toaster.Add("Probleem bij het aanpassen", MatToastType.Danger, "Error");
        }

        this.StateHasChanged();
    }

    public void GaNaarWinkelToevoegen()
    {
        if (this.winkels.Any(v => !v.goedgekeurd))
        {
            Toaster.Add("Uw vorige winkel moet nog goedgekeurd worden", MatToastType.Danger, "Error");
        }
        else
        {
            navigationManager.NavigateTo("/winkeltoevoegen");
        }
    }

    public void GaNaarWinkel(string winkelAdress)
    {
        navigationManager.NavigateTo($"/winkel/{winkelAdress}", true);
    }

    public void ActiefMakenWinkel(WinkelDomain.Winkel winkel)
    {
        winkel.actief = !winkel.actief;
        bool temp = DBConnection.VeranderStatusWinkel(winkel);
        this.StateHasChanged();
    }
}
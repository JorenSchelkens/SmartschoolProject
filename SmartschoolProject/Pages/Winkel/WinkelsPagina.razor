@page "/winkels"
@page "/winkels/{naam}"
@inject IMatToaster Toaster
@inject NavigationManager NavigationManager
@inject GoogleGebruiker Gebruiker
@inject ISessionStorageService sessionStorage
<style>
    .tabs {
        background-color: rgba(193, 193, 193, 0.3);
    }

    .container {
        padding: 0px;
        margin: 0px;
    }

    .row {
        margin: 0px;
    }

    .content px-4 {
        padding-right: 0px;
    }
</style>

@if (alleWinkels)
{
    <div class="mat-layout-grid">
        <div class="mat-layout-grid-inner">

            @foreach (WinkelDomain.Winkel winkel in winkels.Where(winkel => winkel.actief && winkel.goedgekeurd))
            {
                <div class="mat-layout-grid-cell">
                    <img src="https://image.freepik.com/vrije-vector/vlees-winkel-logo_71835-89.jpg" style="width: 150px;height: 150px;" alt="Afbeeldingsresultaat voor winkel logo" />
                    <h2>@winkel.naam</h2>
                    <MatButton Unelevated="true" @onclick="@(() => GaNaarWinkel(winkel))">Ga naar winkel</MatButton>
                </div>
            }

        </div>
    </div>
}
else
{

    <div class="container">
        <div class="row">
            <div class="col-8">

                <div class="mat-layout-grid">
                    <div class="mat-layout-grid-inner">

                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                            <h1>@winkel.naam</h1>
                        </div>

                        @if (winkel.artikels != null)
                        {
                            @foreach (Artikel artikel in winkel.artikels)
                            {
                                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                                    <h2>Product naam: @artikel.productnaam</h2>
                                </div>

                                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                                    <h2>Prijs: €@artikel.standaardPrijs</h2>
                                </div>

                                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                                    <h2>Aantal producten in stock: @artikel.stock</h2>
                                </div>

                                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">

                                    @if (artikel.stock == 0)
                                    {
                                        <MatButton Disabled="true" Unelevated="true" @onclick="@(() => OpenDialog(null))">Bestel</MatButton>
                                    }
                                    else
                                    {
                                        <MatButton Unelevated="true" @onclick="@(() => OpenDialog(artikel))">Bestel</MatButton>
                                    }

                                </div>

                                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12"></div>
                            }
                        }

                    </div>
                </div>

                <MatDialog @bind-IsOpen="@dialogIsOpen">
                    <MatDialogContent>
                        <MatDialogTitle>Informatie over artikel</MatDialogTitle>

                        <MatNumericUpDownField @onfocusout="CheckNummer" Label="Aantal:" Minimum="1" Maximum="max" @bind-Value="aantalVanProduct"></MatNumericUpDownField>
                        <MatTextField @bind-Value="@notitie" Dense="true" Label="Notitie:" TextArea="true"></MatTextField>

                    </MatDialogContent>
                    <MatDialogActions>
                        <MatButton @onclick="@Sluit">ANNULEER</MatButton>
                        <MatButton OnClick="@BestelArtikel">VOEG TOE</MatButton>
                    </MatDialogActions>
                </MatDialog>

            </div>
            <div class="col-4">

                @if (!this.Bestelling.IsBestellingEmpty())
                {
                    <div class="mat-layout-grid">
                        <div class="mat-layout-grid-inner">

                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                                <h3>Winkelmandje</h3>
                            </div>

                            @foreach (BesteldArtikel besteldArtikel in this.Bestelling.GetBesteldeArtikels())
                            {

                                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                                    <h2>@besteldArtikel.AantalString</h2>
                                </div>

                                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                                    <h2>@besteldArtikel.Productnaam</h2>
                                </div>

                                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                                    <h2>€@besteldArtikel.Prijs</h2>
                                </div>

                                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                                    <MatFAB @onclick="@(() => VerwijderArtikel(besteldArtikel))" Icon="@MatIconNames.Remove"></MatFAB>
                                </div>

                            }

                            <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
                                <MatButton Unelevated="true" @onclick="@(() => BestellingAfronden())">Bestelling Afronden</MatButton>
                            </div>

                        </div>
                    </div>
                }

            </div>
        </div>
    </div>
}

@code {

    public List<WinkelDomain.Winkel> winkels = new List<WinkelDomain.Winkel>();
    public Winkel winkel { get; set; } = new Winkel();
    public DBConnection DBConnection { get; set; }
    public bool alleWinkels;

    public bool dialogIsOpen = false;

    public int max = 2;

    public int aantalVanProduct = 1;
    public string notitie = "";

    public Bestelling Bestelling { get; set; }
    public Artikel Artikel { get; set; }

    [Parameter]
    public string Naam { get; set; }

    protected override void OnInitialized()
    {
        DBConnection = new DBConnection();

        if (Naam == null)
        {
            winkels = DBConnection.GetAllWinkels();
            alleWinkels = true;
            this.StateHasChanged();
        }
        else
        {
            //Get artikels van winkel uit DB
            //winkel = DBConnection

            winkel = DBConnection.GetWinkel(Naam);

            Bestelling = new Bestelling(Gebruiker.GebruikerInfo.GebruikersNaam);

            this.StateHasChanged();
        }

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this.Gebruiker = await sessionStorage.GetItemAsync<GoogleGebruiker>("GoogleGebruiker");
        this.Gebruiker.Refresh();

        if(this.Bestelling != null)
        {
            this.Bestelling.GebruikersNaam = this.Gebruiker.GebruikerInfo.GebruikersNaam;
        }

        this.StateHasChanged();
    }

    public void GaNaarWinkel(Winkel winkel)
    {
        NavigationManager.NavigateTo($"/winkels/{winkel.naam}", true);
    }

    public void BestelArtikel()
    {
        BesteldArtikel temp = new BesteldArtikel(Artikel, aantalVanProduct, notitie);

        bool succes = this.Bestelling.AddArtikel(temp);

        if (succes)
        {
            this.Artikel = null;
            this.aantalVanProduct = 1;
            this.notitie = "";
            this.dialogIsOpen = false;
        }

        this.StateHasChanged();
    }

    public void BestellingAfronden()
    {
        this.Bestelling.FinishBestelling();

        bool succes = DBConnection.AddBestelling(this.Bestelling);

        if (succes)
        {
            NavigationManager.NavigateTo($"/betalen/{this.Bestelling.Code}");
        }
        else
        {
            Toaster.Add("Er is iets fout gegaan, neem contact op met een ICT verantwoordelijke", MatToastType.Danger, "Error");
        }
    }

    public void Sluit()
    {
        dialogIsOpen = false;
    }

    public void OpenDialog(Artikel artikel)
    {
        if (artikel != null)
        {
            this.Artikel = artikel;
            max = this.Artikel.stock;
            dialogIsOpen = true;
        }
    }

    public void VerwijderArtikel(BesteldArtikel besteldArtikel)
    {
        this.Bestelling.VerwijderArtikel(besteldArtikel);
        this.StateHasChanged();
    }

    public void CheckNummer()
    {
        if (aantalVanProduct < 1 || aantalVanProduct > max)
        {
            aantalVanProduct = 1;
        }
    }
}
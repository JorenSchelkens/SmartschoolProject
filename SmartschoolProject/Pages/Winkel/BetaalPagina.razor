@page "/betalen/{code}/{winkelnaam}"
@inject IMatToaster Toaster
@inject NavigationManager NavigationManager
@inject GoogleGebruiker Gebruiker
@inject ISessionStorageService sessionStorage
@inject IJSRuntime JSRuntime;

<MatH1>Betalen</MatH1>

<style>
    td {
        padding: 15px;
    }
</style>

<div class="mat-layout-grid">
    <div class="mat-layout-grid-inner">

        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">
            <h2>Bestelling</h2>
        </div>
        <table>
            <tr>
                <td><h3>Naam</h3></td>
                <td><h3>Aantal</h3></td>
                <td><h3>Prijs</h3></td>
                <td><h3>Notitie</h3></td>
            </tr>
            @foreach (BesteldArtikel besteldArtikel in this.Bestelling.GetBesteldeArtikels())
            {
            <tr>
                <td>
                    <h3>@besteldArtikel.Productnaam</h3>
                </td>
                <td>
                    <h3>@besteldArtikel.AantalString</h3>
                </td>
                <td>
                    <h3>€@besteldArtikel.Prijs</h3>
                </td>
                <td>
                    <h3>@besteldArtikel.Notitie</h3>
                </td>
            </tr>
            }
        </table>

        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">

            <h2>Totaal bedrag: €@Bestelling.TotaalBedrag</h2>

            <MatButton Unelevated="true" @onclick="BestellingAfronden">Bestelling afronden</MatButton>

            <MatButton Unelevated="true" @onclick="TerugNaarWinkel">Terug naar winkel</MatButton>

        </div>

        <div id="test"></div>

    </div>
</div>

@code{

    [Parameter]
    public string Code { get; set; }

    [Parameter]
    public string WinkelNaam { get; set; }

    private DBConnection DBConnection { get; set; }

    public Bestelling Bestelling { get; set; }

    protected override void OnInitialized()
    {
        this.DBConnection = new DBConnection();

        if (!string.IsNullOrEmpty(this.Code))
        {
            this.Bestelling = DBConnection.GetBestelling(this.Code);
        }
        else
        {
            Toaster.Add("Er is geen betaling gevonden", MatToastType.Danger, "Error");
            NavigationManager.NavigateTo("/");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this.Gebruiker = await sessionStorage.GetItemAsync<GoogleGebruiker>("GoogleGebruiker");
        this.Gebruiker.Refresh();
        this.StateHasChanged();
    }

    public async Task BestellingAfronden()
    {
        await JSRuntime.InvokeAsync<string>("showPaypalButtonCustom", Bestelling.TotaalBedrag);
    }

    public void TerugNaarWinkel()
    {
        NavigationManager.NavigateTo($"/winkels/{this.WinkelNaam}");
    }

}
@page "/admin"
@inject NavigationManager navigationManager
@inject GoogleGebruiker GoogleGebruiker
@inject IMatToaster Toaster
@page "/DocIO"
@inject Data.WordService service
@inject Microsoft.JSInterop.IJSRuntime JS
@using System.IO;

<MatAccordion Multi="true">
    <MatExpansionPanel>
        <MatExpansionPanelSummary>
            <MatExpansionPanelHeader>Bekijk alle winkels</MatExpansionPanelHeader>
        </MatExpansionPanelSummary>
        <MatExpansionPanelDetails>
            <div class="mat-layout-grid">
                <MatSlideToggle @bind-Value="@Val1"></MatSlideToggle>
                @if (Val1)
                {
                    <span style="margin:10px">alle winkels</span>
                }
                else
                {
                    <span style="margin:10px">actieve winkels</span>
                }
                @if (Val1)
                {
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                    <b>winkelnummer</b>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                    <b>naam</b>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                    <b>beheerder</b>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                    <b>actief</b>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                    <b>goedgekeurd</b>
                </div>

                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">

                </div>

                @foreach (WinkelDomain.Winkel winkel in winkels.Where(winkel => winkel.goedgekeurd))
                {
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                        @winkel.winkelnr
                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                        @winkel.naam
                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                        @winkel.beheerder
                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">

                        @if (winkel.actief)
                        {
                            <span>Actief</span>
                        }
                        else
                        {
                            <span>Niet Actief</span>
                        }

                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">

                        @if (winkel.goedgekeurd)
                        {
                            <span>Goedgekeurd</span>
                        }
                        else
                        {
                            <span>Niet Goedgekeurd</span>
                        }

                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                        @if (winkel.actief)
                        {
                            <MatButton Type="submit" @key="winkel" OnClick="@(() => ActiefMakenWinkel(winkel))" Style="width: 200px" Raised="true">niet actief</MatButton>
                        }
                        else
                        {
                            <MatButton Type="submit" @key="winkel" OnClick="@(() => ActiefMakenWinkel(winkel))" Style="width: 200px" Raised="true">actief</MatButton>
                        }
                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                        <MatButton Unelevated="true" OnClick="@(() => WijzigWinkelVerantwoordelijkePopUp(winkel.naam))">Wijzig</MatButton>
                    </div>


                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">

                        </div>
                        }
                    </div>
                }
                else
                {
            <div class="mat-layout-grid-inner">
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                    <b>winkelnummer</b>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                    <b>naam</b>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                    <b>beheerder</b>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                    <b>actief</b>
                </div>
                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                    <b>goedgekeurd</b>
                </div>


                <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">

                </div>
                @foreach (WinkelDomain.Winkel winkel in winkels.Where(winkel => winkel.actief && winkel.goedgekeurd))
                {
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                        @winkel.winkelnr
                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                        @winkel.naam
                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                        @winkel.beheerder
                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                        @if (winkel.actief)
                        {
                            <span>Actief</span>
                        }
                        else
                        {
                            <span>Niet Actief</span>
                        }
                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                        @if (winkel.goedgekeurd)
                        {
                            <span>Goedgekeurd</span>
                        }
                        else
                        {
                            <span>Niet Goedgekeurd</span>
                        }
                    </div>

                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                        @if (winkel.actief)
                        {
                            <MatButton Type="submit" @key="winkel" OnClick="@(() => ActiefMakenWinkel(winkel))" Style="width: 200px" Raised="true">niet actief</MatButton>
                        }
                        else
                        {
                            <MatButton Type="submit" @key="winkel" OnClick="@(() => ActiefMakenWinkel(winkel))" Style="width: 200px" Raised="true">actief</MatButton>
                        }
                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">

                    </div>
                }
            </div>
                }
            </div>
        </MatExpansionPanelDetails>
    </MatExpansionPanel>
    <MatExpansionPanel>
        <MatExpansionPanelSummary>
            <MatExpansionPanelHeader>Winkelverzoeken bekijken</MatExpansionPanelHeader>
        </MatExpansionPanelSummary>
        <MatExpansionPanelDetails>
            <div class="mat-layout-grid">
                <div class="mat-layout-grid-inner">
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                        <b>winkelnummer</b>
                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                        <b>naam</b>
                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                        <b>beheerder</b>
                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                        <b>actief</b>
                    </div>
                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-4">
                        <b>goedgekeurd</b>
                    </div>

                    <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">

                    </div>
                    @foreach (WinkelDomain.Winkel winkel in winkels.Where(winkel => !winkel.goedgekeurd))
                    {
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                            @winkel.winkelnr
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                            @winkel.naam
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                            @winkel.beheerder
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-1">
                            @if (winkel.actief)
                            {
                                <span>Actief</span>
                            }
                            else
                            {
                                <span>Niet Actief</span>
                            }
                        </div> <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                            @if (winkel.goedgekeurd)
                            {
                                <span>Goedgekeurd</span>
                            }
                            else
                            {
                                <span>Niet Goedgekeurd</span>
                            }
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                            <MatButton Type="submit" OnClick="@(() => goedkeuringWinkel(winkel))" Style="width: 200px" Raised="true">Goedkeuren</MatButton>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-2">
                            <MatButton Type="submit" OnClick="@(() => afkeuringWinkel(winkel))" Style="width: 200px" Raised="true">Afwijzen</MatButton>
                        </div>
                        <div class="mat-layout-grid-cell mat-layout-grid-cell-span-12">

                        </div>
                    }
                </div>
                </div>

        </MatExpansionPanelDetails>
    </MatExpansionPanel>
    <MatExpansionPanel>
        <MatExpansionPanelSummary>
            <MatExpansionPanelHeader>Bekijk stock (winkel)</MatExpansionPanelHeader>
        </MatExpansionPanelSummary>
        <MatExpansionPanelDetails>
            <MatAccordion Multi="true">
                @if (winkels != null)
                {
                    @foreach (WinkelDomain.Winkel winkel in winkels.Where(winkel => winkel.actief && winkel.goedgekeurd))
                    {
                        <MatExpansionPanel>
                            <MatExpansionPanelSummary>
                                <MatExpansionPanelHeader>@winkel.naam</MatExpansionPanelHeader>
                            </MatExpansionPanelSummary>
                            <MatExpansionPanelDetails>
                                <MatList>
                                    @foreach (Artikel artikel in winkel.artikels)
                                    {
                                        <MatListItem>
                                            @artikel.productnaam
                                            <p style="text-align:left; width:100%; padding:0;"></p>
                                            @artikel.stock
                                        </MatListItem>
                                        <MatListDivider></MatListDivider>
                                    }
                                </MatList>
                            </MatExpansionPanelDetails>
                        </MatExpansionPanel>
                    }
                }
            </MatAccordion>
        </MatExpansionPanelDetails>
    </MatExpansionPanel>
    <MatExpansionPanel>
        <MatExpansionPanelSummary>
            <MatExpansionPanelHeader>Bekijk lokalen</MatExpansionPanelHeader>
            <MatExpansionPanelSubHeader>
                <MatButton Label="Lokaal toevoegen" OnClick="@voegLokaalToePopup" />
            </MatExpansionPanelSubHeader>
        </MatExpansionPanelSummary>
        <MatExpansionPanelDetails>
            <MatAccordion Multi="true">
                @if (lokalen != null)
                {
                    @foreach (Lokaal lokaal in lokalen)
                    {
                        <MatExpansionPanel>
                            <MatExpansionPanelSummary>
                                <MatExpansionPanelHeader>Lokaal @lokaal.lokaalNr</MatExpansionPanelHeader>
                            </MatExpansionPanelSummary>
                            <MatExpansionPanelDetails>

                                <p style="font-weight: bold">Lokaal actief/inactief: </p>

                                <MatSlideToggle @onclick="(() => veranderStatus(lokaal))" @bind-Value="@lokaal.isActief"></MatSlideToggle>

                                @if (lokaal.isActief)
                                {
                                    <p style="font-weight: bold">Actief</p>
                                }
                                else
                                {
                                    <p style="font-weight: bold">Inactief</p>
                                }

                                <p>Verantwoordelijke : @lokaal.lokaalVerantwoordelijke</p>

                                <MatButton Unelevated="true" Label="Verantwoordelijke wijzigen" OnClick="@(() => WijzigVerantwoordelijkePopup(lokaal.lokaalNr))" />
                                <MatButton Unelevated="true" Label="Voorwerp toevoegen" OnClick="@(() => voegVoorwerpToePopup(lokaal.lokaalNr))" />

                                <p style="margin-top: 20px">Voorwerpen :</p>
                                <MatList>
                                    @foreach (Voorwerp voorwerp in lokaal.Voorwerpen)
                                    {
                                        <MatListItem>
                                            @voorwerp.voorwerpNaam
                                            <p style="text-align:right; width:100%; padding:0;"></p>
                                            <MatButton Label="-" style="padding-right:10px" OnClick="@(() => Verlaag(voorwerp, lokaal))" />
                                            <p style="padding-right:10px; max-height:10px">@voorwerp.aantal</p>
                                            <MatButton Label="+" style="margin-right:0px;" OnClick="@(() => Verhoog(voorwerp, lokaal))" />
                                            <MatIconButton Icon="notification_important" style="margin-right:5px;" OnClick="@(() => popupOnClick(voorwerp, lokaal))"></MatIconButton>
                                            <p style="margin-right:0px; max-height:1px">@voorwerp.aantalDefecten</p>
                                            <MatButton Label="-" style="margin-right:1px;" OnClick="@(() => verwijderDefect(voorwerp, lokaal))" />
                                            <p style="position: absolute; right: 0; max-height:10px"></p>

                                        </MatListItem>
                                        <MatListDivider></MatListDivider>
                                    }
                                </MatList>
                            </MatExpansionPanelDetails>
                        </MatExpansionPanel>
                    }
                }
            </MatAccordion>
        </MatExpansionPanelDetails>
    </MatExpansionPanel>
</MatAccordion>

<MatDialog @bind-IsOpen="@dialogLokaalIsOpen">
    <MatDialogTitle>Nieuw lokaal</MatDialogTitle>
    <MatDialogContent>
        <MatNumericUpDownField @onfocusout="CheckNummerLokaal" Label="Lokaalnummer:" Minimum="0" @bind-Value="lokaalNummer"></MatNumericUpDownField>
        <MatTextField @onfocusout="CheckNummerLokaal" Label="Lokaalverantwoordelijke:" @bind-Value="lokaalverantwoordelijke"></MatTextField>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(() => maakLokaalAan(lokaalNummer, lokaalverantwoordelijke))">Toevoegen</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@dialogVoorwerpIsOpen">
    <MatDialogTitle>Nieuw voorwerp</MatDialogTitle>
    <MatDialogContent>
        <MatTextField @onfocusout="CheckAantalVoorwerp" Label="Voorwerpnaam:" @bind-Value="voorwerpnaam"></MatTextField>
        <MatNumericUpDownField @onfocusout="CheckAantalVoorwerp" Label="Aantal:" Minimum="1" @bind-Value="aantalVoorwerp"></MatNumericUpDownField>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(() => maakVoorwerpAan(voorwerpnaam, aantalVoorwerp))">Toevoegen</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@dialogVerantwoordelijkeIsOpen">
    <MatDialogTitle>Nieuwe verantwoordelijke</MatDialogTitle>
    <MatDialogContent>
        <MatTextField @onfocusout="CheckWijziging" Label="Naam:" @bind-Value="naamVerantwoordelijke"></MatTextField>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(() => WijzigVerantwoordelijke(naamVerantwoordelijke))">Bevestig</MatButton>
    </MatDialogActions>
</MatDialog>

<MatDialog @bind-IsOpen="@dialogWinkelVerantwoordelijkeIsOpen">
    <MatDialogTitle>Nieuwe winkelverantwoordelijke</MatDialogTitle>
    <MatDialogContent>
        <MatTextField @onfocusout="CheckWijzigingWinkel" Label="Naam:" @bind-Value="naamWinkelVerantwoordelijke"></MatTextField>
    </MatDialogContent>
    <MatDialogActions>
        <MatButton OnClick="@(() => WijzigWinkelVerantwoordelijke(naamWinkelVerantwoordelijke))">Bevestig</MatButton>
    </MatDialogActions>
</MatDialog>

<MatButton style="margin-top: 10px" Raised="true" @onclick="@CreateWord">Exporteer Word</MatButton>

@DBConnection.ErrorMessage

@code {
    private bool Val1 = true;
    private bool Val2 = false;

    public DBConnection DBConnection { get; set; } = new DBConnection();
    public DBConnectionMongoDB DBConnectionMongoDB { get; set; } = new DBConnectionMongoDB();

    public bool dialogLokaalIsOpen = false;
    public int lokaalNummer;
    public string lokaalverantwoordelijke;

    public bool dialogVoorwerpIsOpen = false;
    public int aantalVoorwerp;
    public string voorwerpnaam;
    public int lokaalNr;

    public bool dialogVerantwoordelijkeIsOpen = false;
    public string naamVerantwoordelijke;

    public bool dialogWinkelVerantwoordelijkeIsOpen = false;
    public string winkelnaam;
    public string naamWinkelVerantwoordelijke;

    public Voorwerp voorwerp { get; set; }
    public Lokaal lokaal { get; set; }
    public WinkelDomain.Winkel winkel { get; set; }

    public List<WinkelDomain.Winkel>
    winkels = new List<WinkelDomain.Winkel>();
    public List<Lokaal> lokalen { get; set; }

    MemoryStream documentStream;

    protected async void CreateWord()
    {
        documentStream = service.CreateWord(lokalen);
        await JS.SaveAs("Overzicht.docx", documentStream.ToArray());
    }

    protected override async Task OnInitializedAsync()
    {
        if (!GoogleGebruiker.GebruikerInfo.IsAdmin)
        {
            navigationManager.NavigateTo("/");
        }

        winkels = DBConnection.GetAllWinkels();
        lokalen = await DBConnectionMongoDB.GetAllLokalen();

    }

    public void voegLokaalToePopup()
    {
        dialogLokaalIsOpen = true;
    }

    public void voegVoorwerpToePopup(int lokaalnummer)
    {
        dialogVoorwerpIsOpen = true;
        lokaalNr = lokaalnummer;
    }

    public void WijzigVerantwoordelijkePopup(int lokaalnummer)
    {
        dialogVerantwoordelijkeIsOpen = true;
        lokaalNr = lokaalnummer;
    }

    public void WijzigWinkelVerantwoordelijkePopUp(string naamWinkel)
    {
        dialogWinkelVerantwoordelijkeIsOpen = true;
        winkelnaam = naamWinkel;
    }

    public async void maakLokaalAan(int lokaalNr, string lokaalverantwoordelijke)
    {
        lokaal = new Lokaal(lokaalNr);
        lokaal.lokaalVerantwoordelijke = lokaalverantwoordelijke;

        dialogLokaalIsOpen = false;

        var gelukt = await DBConnectionMongoDB.SaveLokaal(lokaal);

        if (gelukt)
        {
            Toaster.Add("Succesvol toegevoegd", MatToastType.Success, "Gelukt");
        }
        else
        {
            Toaster.Add("Er bestaat reeds een lokaal met dit nummer", MatToastType.Danger, "Mislukt");
        }
        this.StateHasChanged();

    }

    public async void maakVoorwerpAan(string voorwerpnaam, int aantalVoorwerp)
    {
        voorwerp = new Voorwerp(voorwerpnaam);
        voorwerp.aantal = aantalVoorwerp;

        dialogVoorwerpIsOpen = false;

        lokaal = await DBConnectionMongoDB.GetLokaal(lokaalNr);
        lokaal.Voorwerpen.Add(voorwerp);

        var gelukt = await DBConnectionMongoDB.UpdateLokaal(lokaal);

        if (gelukt)
        {
            Toaster.Add("Succesvol toegevoegd", MatToastType.Success, "Gelukt");
        }
        else
        {
            Toaster.Add("Er is iets misgelopen", MatToastType.Danger, "Mislukt");
        }
        this.StateHasChanged();

    }

    public async void WijzigVerantwoordelijke(string naam)
    {
        lokaal = await DBConnectionMongoDB.GetLokaal(lokaalNr);
        lokaal.lokaalVerantwoordelijke = naam;

        dialogVerantwoordelijkeIsOpen = false;

        var gelukt = await DBConnectionMongoDB.UpdateLokaal(lokaal);

        if (gelukt)
        {
            Toaster.Add("Succesvol gewijzigd", MatToastType.Success, "Gelukt");
        }
        else
        {
            Toaster.Add("Er is iets misgelopen", MatToastType.Danger, "Mislukt");
        }
        this.StateHasChanged();

    }

    public void WijzigWinkelVerantwoordelijke(string naam)
    {
        winkel = DBConnection.GetWinkel(winkelnaam);
        winkel.beheerder = naam;

        dialogWinkelVerantwoordelijkeIsOpen = false;

        var gelukt = DBConnection.UpdateWinkel(winkel);

        if (gelukt)
        {
            Toaster.Add("Succesvol gewijzigd", MatToastType.Success, "Gelukt");
        }
        else
        {
            Toaster.Add("Er is iets misgelopen", MatToastType.Success, "Mislukt");
        }
        this.StateHasChanged();
    }

    public void ActiefMakenWinkel(WinkelDomain.Winkel winkel)
    {
        //TODO VERANDER STATUS WINKEL
        winkel.actief = !winkel.actief;
        bool temp = DBConnection.VeranderStatusWinkel(winkel);
        this.StateHasChanged();
    }

    public void goedkeuringWinkel(WinkelDomain.Winkel winkel)
    {
        //TODO VERANDER STATUS WINKEL
        winkel.goedgekeurd = !winkel.goedgekeurd;
        bool temp = DBConnection.VeranderGoedgekeurdWinkel(winkel);
        this.StateHasChanged();
    }

    public void afkeuringWinkel(WinkelDomain.Winkel winkel)
    {
        bool temp = DBConnection.KeurWinkelAf(winkel);

        if (temp)
        {
            this.winkels.Remove(winkel);
        }

        this.StateHasChanged();
    }

    public void sorteerLijst()
    {

    }

    public async void popupOnClick(Voorwerp voorwerp, Lokaal lokaal)
    {
        if (voorwerp.aantalDefecten < voorwerp.aantal)
        {
            voorwerp.aantalDefecten += 1;

            if (voorwerp.aantalDefecten == 0)
            {
                voorwerp.defect = false;
            }
            else
            {
                voorwerp.defect = true;
            }

            await DBConnectionMongoDB.UpdateLokaal(lokaal);

            Toaster.Add("Succesvol toegevoegd", MatToastType.Success, "Gelukt");
        }
        else
        {
            Toaster.Add("U kan niet meer defecten hebben dan dat er " + voorwerp.voorwerpNaam.ToLower() + " zijn", MatToastType.Danger, "Error");
        }


    }

    public async void Verlaag(Voorwerp voorwerp, Lokaal lokaal)
    {
        if (voorwerp.aantal > 0)
        {
            voorwerp.verlaagHoeveelheidVoorwerp();
            await DBConnectionMongoDB.UpdateLokaal(lokaal);
        }
    }

    public async void Verhoog(Voorwerp voorwerp, Lokaal lokaal)
    {
        voorwerp.verhoogHoeveelheidVoorwerp();
        await DBConnectionMongoDB.UpdateLokaal(lokaal);
    }

    public async void verwijderDefect(Voorwerp voorwerp, Lokaal lokaal)
    {
        if (voorwerp.aantalDefecten > 0)
        {
            voorwerp.verlaagDefecte();
            if (voorwerp.aantalDefecten == 0)
            {
                voorwerp.defect = false;
            }
            else
            {
                voorwerp.defect = true;
            }
            await DBConnectionMongoDB.UpdateLokaal(lokaal);
        }

    }

    public void CheckNummerLokaal()
    {
        if (lokaalNummer < 0 || string.IsNullOrWhiteSpace(lokaalverantwoordelijke))
        {
            lokaalNummer = 0;
            lokaalverantwoordelijke = "leerkracht";
        }
    }

    public void CheckAantalVoorwerp()
    {
        if (aantalVoorwerp < 1 || string.IsNullOrWhiteSpace(voorwerpnaam))
        {
            aantalVoorwerp = 1;
            voorwerpnaam = "voorwerp";
        }
    }

    public void CheckWijziging()
    {
        if (string.IsNullOrWhiteSpace(naamVerantwoordelijke))
        {
            naamVerantwoordelijke = "verantwoordelijke";
        }
    }

    public void CheckWijzigingWinkel()
    {
        if (string.IsNullOrWhiteSpace(naamWinkelVerantwoordelijke))
        {
            naamWinkelVerantwoordelijke = "verantwoordelijke";
        }
    }

    public async void veranderStatus(Lokaal lokaal)
    {
        await DBConnectionMongoDB.ChangeStatusLokaal(lokaal);

        string temp = (lokaal.isActief) ? "inactief" : "actief";

        Toaster.Add($"Lokaal {lokaal.lokaalNr} is nu {temp}", MatToastType.Info, "Status");
    }
}

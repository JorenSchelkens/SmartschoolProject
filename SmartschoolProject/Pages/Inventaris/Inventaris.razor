@page "/inventaris"
@inject IMatToaster Toaster

<MatAccordion Multi="true">
    @foreach (Lokaal lokaal in lokalen)
    {
        <MatExpansionPanel>
            <MatExpansionPanelSummary>
                <MatExpansionPanelHeader>Lokaal @lokaal.lokaalNr</MatExpansionPanelHeader>
            </MatExpansionPanelSummary>
            <MatExpansionPanelDetails>
                <MatList>
                    @foreach (Voorwerp voorwerp in lokaal.Voorwerpen)
                    {
                        <MatListItem>
                            @voorwerp.voorwerpNaam
                            <p style="text-align:right; width:100%; padding:0;"></p>
                            <MatButton Label="-" style="padding-right:10px" OnClick="@(() => Verlaag(voorwerp, lokaal))" />
                            <p style="padding-right:10px; max-height:10px">@voorwerp.aantal</p>
                            <MatButton Label="+" style="margin-right:0px;" OnClick="@(() => Verhoog(voorwerp, lokaal))" />
                            <MatIconButton Icon="notification_important" style="margin-right:5px;" OnClick="@(() => popupOnClick(voorwerp, lokaal))"></MatIconButton>
                            <p style="margin-right:0px; max-height:1px">@voorwerp.aantalDefecten</p>
                            <MatButton Label="-" style="margin-right:1px;" OnClick="@(() => verwijderDefect(voorwerp, lokaal))" />
                            <p style="position: absolute; right: 0; max-height:10px"></p>

                        </MatListItem>
                        <MatListDivider></MatListDivider>
                    }
                </MatList>
            </MatExpansionPanelDetails>
        </MatExpansionPanel>
    }
</MatAccordion>


@code{

    public bool dialogIsOpen = false;
    public int itemnummer = 0;

    public DBConnectionMongoDB DBConnectionMongoDB { get; set; } = new DBConnectionMongoDB();

    public List<Lokaal> lokalen = new List<Lokaal>();

    protected override async Task OnInitializedAsync()
    {
        lokalen = await DBConnectionMongoDB.GetAllLokalen();
    }

    public async void popupOnClick(Voorwerp voorwerp, Lokaal lokaal)
    {
        if (voorwerp.aantalDefecten < voorwerp.aantal)
        {
            voorwerp.aantalDefecten += 1;

            if (voorwerp.aantalDefecten == 0)
            {
                voorwerp.defect = false;
            }
            else
            {
                voorwerp.defect = true;
            }

            await DBConnectionMongoDB.UpdateLokaal(lokaal);

            Toaster.Add("Succesvol toegevoegd", MatToastType.Success, "Gelukt");
        }
        else
        {
            Toaster.Add("U kan niet meer defecten hebben dan dat er " + voorwerp.voorwerpNaam.ToLower() + " zijn" , MatToastType.Danger, "Error");
        }


    }

    public async void Verlaag(Voorwerp voorwerp, Lokaal lokaal)
    {
        if (voorwerp.aantal > 0)
        {
            voorwerp.verlaagHoeveelheidVoorwerp();
            await DBConnectionMongoDB.UpdateLokaal(lokaal);
        }
    }

    public async void Verhoog(Voorwerp voorwerp, Lokaal lokaal)
    {
        voorwerp.verhoogHoeveelheidVoorwerp();
        await DBConnectionMongoDB.UpdateLokaal(lokaal);
    }

    public async void verwijderDefect(Voorwerp voorwerp, Lokaal lokaal)
    {
        if (voorwerp.aantalDefecten > 0)
        {
            voorwerp.verlaagDefecte();
            if (voorwerp.aantalDefecten == 0)
            {
                voorwerp.defect = false;
            }
            else
            {
                voorwerp.defect = true;
            }
            await DBConnectionMongoDB.UpdateLokaal(lokaal);
        }


    }

}

@page "/inschrijving"
@page "/inschrijving/{naam}/{secret}"
@inject GoogleGebruiker Gebruiker
@inject IMatToaster Toaster
@inject NavigationManager NavigationManager

@if (geenParameters)
{
    <MatDialog @bind-IsOpen="@dialogIsOpen">
        <MatDialogContent>
            <MatTextField @bind-Value="@gast1Naam" Style="color: #89b129;" Label="Naam Gast 1" FullWidth="true"></MatTextField>
            <MatCheckbox @bind-Value="@gast1plus16" Label="16+"></MatCheckbox>
            <MatTextField @bind-Value="@gast2Naam" Style="color: #89b129;" Label="Naam Gast 2" FullWidth="true"></MatTextField>
            <MatCheckbox @bind-Value="@gast2plus16" Label="16+"></MatCheckbox>
        </MatDialogContent>
        <MatDialogActions>
            <MatButton @onclick="@Sluit">ANNULEER</MatButton>
            <MatButton OnClick="@OkClick">SCHRIJF IN</MatButton>
        </MatDialogActions>
    </MatDialog>

    <style>
        .mdc-text-field--focused:not(.mdc-text-field--disabled) .mdc-floating-label {
            color: #89b129;
        }
    </style>
}

@code
{
    [Parameter]
    public string Naam { get; set; }

    [Parameter]
    public string Secret { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState> AuthenticationStateTask { get; set; }

    private DBConnection DBConnection { get; set; }

    string error = "";

    bool gast1plus16 = false;
    bool gast2plus16 = false;
    bool dialogIsOpen = false;
    bool geenParameters = true;

    public Gast gastheer;
    public Gast gast1;
    public Gast gast2;

    public Inschrijving inschrijving;

    public string gastheerNaam = "";
    public string gast1Naam = "";
    public string gast2Naam = "";

    protected override void OnInitialized()
    {
        this.DBConnection = new DBConnection();

        if (string.IsNullOrEmpty(Naam) || string.IsNullOrEmpty(Secret))
        {
            geenParameters = true;
            dialogIsOpen = true;
        }
        else
        {
            geenParameters = false;
            CheckSecret();
        }
    }

    void Sluit()
    {
        dialogIsOpen = false;
    }

    void OkClick()
    {
        //IMPORTANT: GUID AAN INSCHRIJVING ALS SECRET

        /*Controleer of gast 1 is ingevuld*/
        if (gast2Naam.Trim().Equals("") && gast1Naam.Trim().Equals("") && !gast1plus16)
        {
            Toaster.Add("Vul een gast in", MatToastType.Danger, "Error");
        }
        else if (!gast1Naam.Trim().Equals("") && (gast1plus16 || gast1Naam.Trim().Equals("") && gast2plus16))/*Als gebruiker 2 is ingevuld en 1 niet, verander dan*/
        {
            string naam = Gebruiker.GebruikerInfo.Voornaam + Gebruiker.GebruikerInfo.Naam;

            gastheer = new Gast(naam);

            inschrijving = new Inschrijving(gastheer, "");
            gast1 = new Gast(gast1Naam);

            inschrijving.gast1 = gast1;
            inschrijving.gastheer = gastheer;
            inschrijving.klas = Gebruiker.GebruikerInfo.Groups[0].Name;

            dialogIsOpen = false;
        }
        else if (!gast1Naam.Trim().Equals("") && !gast1plus16)/*Controleer of gast1 is ingevuld en 16+ is*/
        {
            Toaster.Add("U kan geen gasten meepakken onder 16 jaar. Dit wordt gecontroleerd aan de inkom.", MatToastType.Danger, "Error");

        }
        else if (!gast2Naam.Trim().Equals("") && !gast2plus16)
        {
            Toaster.Add("U kan geen gasten meepakken onder 16 jaar. Dit wordt gecontroleerd aan de inkom.", MatToastType.Danger, "Error");
        }
        else
        {
            string naam = Gebruiker.GebruikerInfo.Voornaam + Gebruiker.GebruikerInfo.Naam;

            gastheer = new Gast(naam);
            inschrijving = new Inschrijving(gastheer, "");

            gast1 = new Gast(gast1Naam);
            gast2 = new Gast(gast2Naam);

            inschrijving.gastheer = gastheer;
            inschrijving.gast1 = gast1;
            inschrijving.gast2 = gast2;
            inschrijving.klas = Gebruiker.GebruikerInfo.Groups[0].Name;

            dialogIsOpen = false;
        }
    }

    async void SendEmail()
    {
        MailClass mailClass = new MailClass();

        string temp = Gebruiker.GebruikerInfo.Voornaam + Gebruiker.GebruikerInfo.Naam;
        bool succes = mailClass.SendMail((await AuthenticationStateTask).User.Identity.Name, temp, this.inschrijving.secret);

        if (succes)
        {
            Toaster.Add("Gelieven u inschrijving te bevestigen via u school email", MatToastType.Success, "Succes!");
        }
        else
        {
            Toaster.Add("Bevestigings email niet verstuurd, gelieven contact op te nemen met een IT verantwoordelijke", MatToastType.Danger, "Error");
        }
    }

    void CheckSecret()
    {
        //Kijken dat de secret bij de email hoort in de databank en dan bevestigen op true zetten
        Gast gastheer = new Gast(this.Naam);

        Inschrijving inschrijving = DBConnection.GetInschrijving(gastheer, Gebruiker.GebruikerInfo.Groups[0].Name);
        this.inschrijving = inschrijving;

        if (inschrijving.secret == this.Secret)
        {
            //DB Goedkeuren
            inschrijving.gastheer.Confirmed = true;

            bool succes = this.DBConnection.VeranderInschrijvingConfirmatie(inschrijving);

            if (succes)
            {
                Toaster.Add("Inschrijving goedgekeurd", MatToastType.Success, "Succes!");
                NavigationManager.NavigateTo("/");
            }
            else
            {
                Toaster.Add("Er is een fout opgelopen bij het goedkeuren van de bevestiging, gelieven contact op te nemen met een IT verantwoordelijke", MatToastType.Danger, "Error");
            }
        }
        else
        {
            Toaster.Add("Inschrijving niet goedgekeurd, er is een nieuwe email verstuurd", MatToastType.Danger, "Error");
            this.SendEmail();
        }
    }
}